name: Test and Terraform Plan

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      test_path:
        description: 'Path to the test folder'
        required: true
        default: 'python-code/tests'
      terraform_path:
        description: 'Path to the Terraform folder'
        required: true
        default: 'terraform-code'

env:
  TERRAFORM_DIR: ${{ inputs.terraform_path || 'terraform-code' }}

jobs:
  test-and-plan:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write  # ✅ Allows commenting on PR
      issues: write
      statuses: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set OpenAI API Key
      run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run Python Tests
      id: run_tests
      run: pytest ${{ inputs.test_path || 'python-code/tests' }}
      continue-on-error: true

    - name: Comment on PR if tests fail
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: "⚠️ Python tests failed! Please check the logs and fix the issues before merging."
          });

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test-and-plan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.10.5'

    - name: Configure AWS Credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

    - name: Generate SSH Key
      run: |
        ssh-keygen -t rsa -b 4096 -f $TERRAFORM_DIR/my-terraform-key -N ""

    - name: Terraform Init
      run: |
        cd $TERRAFORM_DIR
        terraform init

    - name: Terraform Plan
      id: terraform_plan
      run: |
        cd $TERRAFORM_DIR
        terraform plan -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                       -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                       -var="aws_region=${{ secrets.AWS_REGION }}" \
                       -out=tfplan
      continue-on-error: true

    - name: Comment on PR if Terraform plan fails
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: "⚠️ Terraform plan failed! Please check the logs and fix the issues before merging."
          });

    - name: Terraform Apply
      run: |
        cd $TERRAFORM_DIR
        terraform apply -auto-approve -input=false
