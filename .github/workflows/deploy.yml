name: Deploy

on:
  push:
    branches:
      - main

env:
  TERRAFORM_DIR: 'terraform-code'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.10.5'

    - name: Terraform Init
      run: |
        cd $TERRAFORM_DIR
        terraform init

    - name: Terraform Plan
      id: terraform_plan
      run: |
        cd $TERRAFORM_DIR
        terraform plan -var="aws_access_key=${{ env.AWS_ACCESS_KEY_ID }}" \
                       -var="aws_secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" \
                       -var="aws_region=${{ env.AWS_REGION }}" \
                       -out=tfplan
      continue-on-error: true

    - name: Comment on PR if Terraform plan fails
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: "⚠️ Terraform plan failed! Please check the logs and fix the issues before merging."
          });

    - name: Terraform Apply
      run: |
        cd $TERRAFORM_DIR
        terraform apply -auto-approve -var="aws_access_key=${{ env.AWS_ACCESS_KEY_ID }}" \
                        -var="aws_secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" \
                        -var="aws_region=${{ env.AWS_REGION }}"

    - name: Get Load Balancer DNS
      id: get_lb_dns
      run: |
        DNS_NAME=$(aws elbv2 describe-load-balancers --query "LoadBalancers[0].DNSName" --output text)
        echo "DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
        echo "Load Balancer DNS: $DNS_NAME"

    - name: Comment Load Balancer DNS on PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: `✅ Load Balancer DNS: ${{ env.DNS_NAME }}`
          });

    - name: Test Load Balancer
      run: |
        curl http://${{ env.DNS_NAME }} ; echo

    - name: Destroy Infrastructure
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
      run: |
        cd $TERRAFORM_DIR
        terraform destroy -auto-approve -var="aws_access_key=${{ env.AWS_ACCESS_KEY_ID }}" \
                          -var="aws_secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" \
                          -var="aws_region=${{ env.AWS_REGION }}"